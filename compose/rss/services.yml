---

services:

  miniflux:
    extends:
      file: ./../common/services.yml
      service: defaults
    image: miniflux/miniflux:latest
    healthcheck:
      test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]
    depends_on:
      db:
        condition: service_healthy
    network_mode: service:miniflux-ts
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER?error}:${POSTGRES_PASSWORD?error}@db/${POSTGRES_DB?error}?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_USER?error}
      - ADMIN_PASSWORD=${MINIFLUX_PASS?error}

  db:
    extends:
      file: ./../common/services.yml
      service: defaults
    image: postgres:15
    cap_add:
     - SETGID
     - SETUID
     - CHOWN
     - DAC_OVERRIDE
    networks:
      - db
    environment:
      - POSTGRES_USER=${POSTGRES_USER?error}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?error}
      - POSTGRES_DB=${POSTGRES_DB?error}
    volumes:
      - ${MINIFLUX_DB_APP_DATA?error}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s

  rsshub:
    extends:
      file: ./../common/services.yml
      service: defaults
    image: diygod/rsshub:chromium-bundled
    environment:
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: "redis://redis:${REDIS_PORT?error}/"
    networks:
      redis:
      rsshub-ts:
      rsshub:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${RSSHUB_PORT?error}/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis

  redis:
    extends:
      file: ./../common/services.yml
      service: defaults
    image: redis:alpine
    networks:
      - redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    cap_add:
     - SETGID
     - SETUID
